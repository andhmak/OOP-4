1. τα ονόματα και τους αριθμούς μητρώων των φοιτητών που εκπόνησαν την εργασία (το πολύ δύο)
2. την εντολή για τη μεταγλώττιση του προγράμματος,
3. την εντολή εκτέλεσης του προγράμματος
4. πληροφορίες σχετικά με τη μεθοδολογία που ακολουθήσατε, όπως αναπαραστάσεις δεδομένων, παραδοχές που κάνατε κ.λ.π.
5. περιγραφή μέσω βημάτων της μεθοδολογίας που ακολουθήσατε

Δημάκης Αντώνιος sdi1900047

Εντολή μεταγλώττισης:;
g++ -o rpg rpg.cpp main.cpp

Εντολή εκτέλεσης:
./rpg

Σχεδιαστικές επιλογές:
Έχουν μοντελοποιηθεί οι εξής 24 έννοιες μέσω κλάσεων (όνομα αντιστοίχων κλάσεων σε παρένθεση):
Αντικείμενο (Item), όπως αυτό περιγράφεται στην εκφώνηση, με τις εξής υποκλάσεις:
    Όπλο (Weapon), όπως αυτό περιγράφεται στην εκφώνηση.
    Πανοπλία (Armor), όπως αυτή περιγράφεται στην εκφώνηση.
    Φίλτρο (Potion), όπως αυτό περιγράφεται στην εκφώνηση, με τις εξής υποκλάσεις:
        Φίλτρο δύναμης (StrengthPotion), φίλτρο που επηρεάζει το στατιστικό της δύναμης.
        Φίλτρο επιδεξιότητας (DexterityPotion), φίλτρο που επηρεάζει το στατιστικό της επιδεξιότητας.
        Φίλτρο ευκινησίας (AgilityPotion), φίλτρο που επηρεάζει το στατιστικό της ευκινησίας.
    Ξόρκι (Spell), όπως αυτό περιγράφεται στην εκφώνηση, με τις εξής υποκλάσεις:
        Ξόρκι πάγου (IceSpell), όπως αυτό περιγράφεται στην εκφώνηση.
        Ξόρκι φωτιάς (FireSpell), όπως αυτό περιγράφεται στην εκφώνηση.
        Ξόρκι ηλεκτρισμού (LightingSpell), όπως αυτό περιγράφεται στην εκφώνηση.
Ζωντανό ον (Living), όπως αυτό περιγράφεται στην εκφώνηση, με τις εξής υποκλάσεις:
    Ήρωας (Hero), όπως αυτός περιγράφεται στην εκφώνηση, με τις εξής υποκλάσεις:
        Μαχητής (Warrior), όπως αυτός περιγράφεται στην εκφώνηση.
        Μάγος (Sorcerer), όπως αυτός περιγράφεται στην εκφώνηση.
        Ιππότης (Paladin), όπως αυτός περιγράφεται στην εκφώνηση.
    Τέρας (Monster), όπως αυτό περιγράφεται στην εκφώνηση.
        Δράκος (Dragon), όπως αυτός περιγράφεται στην εκφώνηση.
        Ον με εξωσκελετός (Exoskeleton), όπως αυτός περιγράφεται στην εκφώνηση.
        Πνεύμα (Spirit), όπως αυτό περιγράφεται στην εκφώνηση.
Status effect (StatusEffect), μια προσωρινή μεταβολή στα στατιστικά ενός τέρατος, συγκεκριμένου μεγέθους και διάρκειας σε γύρους.
Ομάδα ηρώων (Party), ένα σύνολο ηρώων που κατέχουν κάποια αντικείμενα, και μπορούν να εκτελέσουν πράξεις όπως το να εμπλακούν σε μάχη.
Αγορά (Market), που περιέχει ένα σύνολο αντικειμένων διαθέσιμο προς πώληση σε ένα Party, και όπου ένα Party μπορεί να πουλήσει αντικείμενα.
Πλέγμα (Grid), ο κόσμος του παιχνιδιού όπου υπάρχει και κινείται η ομάδα των ηρώων.

Το Spell όπως το Item έχει και αυτό όνομα, τιμή και ελάχιστο επίπεδο όπως όλα τα αντικείμενα, και αγοραπωλείται και αποθηκεύεται όπως όλα τα
αντικείμενα. Επομένως στο μοντέλο του παιχνιδιού το ξόρκι είναι και αυτό ένα αντικείμενο. "Μεταφράζοντας" αυτήν την ιδιότητα στον αντικειμενοστραφή
και ορίζοντάς το ως υποκλάση, παρόλο που αυτό δεν αναφέρεται ρητά στην εκφώνηση, επιτυγχάνεται απλοποίηση του κώδικα μέσω της χρήσης του πολυμορφισμού.

Κατά την μάχη ο πάικτης μπορεί να επιλέξει μόνο μία πράξη (attack, castSpell, use, equip) ανά ήρωα.

Οι ήρωες (party) έχουν κοινό inventory/σύνολο αντικειμένων που κατέχουν. Επομένως αν και ο καθένας έχει τα δικά του χρήματα, στην πράξη τα μοιράζονται.
Κατά την αγορά αντικειμένων δίνουν με την σειρά τους χρήματα οι ήρωες μέχρι να ολοκληρωθεί το ποσό, και κατά την πώληση τα χρήματα τα παίρνει ο πρώτος
ήρωας.

Grid με τετράγωνια με μόνο ενδείξεις και όχι αντικείμενα κλάσεων

μόνο μία αγορά

μη ανάγκη για πιο πολύπλοκες δομές γιατί δεν χρειάζεται αναζήτηση/ταξινόμηση
πίνακες για αντικείμενα επειδή αλλάζει ο αριθμός (ίδια)
πολυπλοκότητα με λίστα στο σβήσιμο γιατί ούτως ή άλλως γίνεται διάσχιση και λίστες για Status effect γιατί αφαιρούνται συχνά από οποιδήποτε
σημείο (στην γενική περίπτωση όπου δεν είναι μόνο 3 γύρων όλα)

Στο names.h βρίσκονται τα ονόματα των ζωντανών, που διαλέγονται τυχαία, και των αντικειμένων, που διαλέγονται με την σειρά (από την αρχή αν
αλλάξουν οι παράμετροι και τελειώσουν τα ονόματα λόγω πολλών αντικειμένων).

περιγραφή σε κάθε σημείο των δυνατών "εντολών".

με την σειρά τι γίνεται

Εκτός από healthPower, κάθε Living έχει και μια μεταβλητή-μέλος maxHealthPower, και δεν μπορεί να ανακτήσει healthPower που να την ξεπερνά.
Ομοίως υπάρχει maxMagicPower για την magicPower του Hero.

Η ζημιά που προκαλεί ένας ήρωας σε μια επίθεση προκύπτει από το άθροισμα της δύναμής του και αυτής του όπλου του. Αν δεν έχει όπλο τότε
είναι απλά της δύναμής του.

Δεν εξηγείται ποια είναι η πρακτική διαφορά του να χρησιμοποιείται ένα weapon με δύο χέρια, άρα σε αυτήν την υλοποίηση σημαίνει πως
σε μια επίθεση ο hero που το χρησιμοποιεί μπορεί να διπλασιάσει την ζημία που αυτό προκαλεί (εφόσον μπορεί να "χτυπήσει" χρησιμοποιώντας
την δύναμη και των δύο χεριών). 

Σε ένα Monster αν του μειωθεί η defense από κάποιο StatusEffect που προκαλείται από FireSpell, μπορεί να γίνει αρνητικός αριθμός. Αυτό σημαίνει
πως η απόλυτη τιμή της προστίθεται στην δύναμη του αντιπάλου όταν δέχεται δημία από επίθεση. Θεωρώ πως αυτό βγάζει νόημα κρίνοντας από το πώς
αντιμετωπίζονται γενικά τέτοιες περιπτώσεις σε παιχνίδια RPG. Αντίθετα, μια επίθεση δεν θα προκαλέσει ποτέ αρνητική ζημία (αύξηση της healthPower),
ακόμα και αν η δύναμη της επίθεσης είναι μικρότερη από την άμυνα του αντιπάλου, ή και αρνητική λόγω StatusEffect που προκλήθηκε από IceSpell.

Το Party ξεκινά στο κάτω-αριστερά τετράγωνο του Grid, το οποίο είναι πάντα common.

Ο χρήστης του προγράμματος (παίκτης) μπορεί να 

που συμμετέχει στην λειτουργία ενός σχολείου (Person), του μαθητή (Student),
του μαθητή μικρής τάξης (Junior), του μαθητή μεγάλης τάξης (Senior),του δασκάλου (Teacher), του χώρου από όπου μπαίνουν και βγαίνουν μαθητές (Area),
της αυλής (Yard), του κλιμακοστασίου (Stairs), του διαδρόμου (Corridor), της τάξης (), του ορόφου (Floor) και του σχολείου (School).

Οι κλάσεις Junior, Senior, Teacher περιέχουν τα μέλη στατικά lj, ls, lt αντίστοιχα, που προσδιορίζουν τον "ρυθμό κούρασης" αυτών των εξειδικεύσεων
ανθρώπων. Είναι στατικά εφόσον η πληροφορία είναι κοινή σε όλα τα αντικείμενα των κλάσεων και δεν υπάρχει ανάγκη πολλαπλής αποθήκευσής της.

Οι κλάσεις Student και Teacher είναι υποκλάσεις της Person, οι Junior και Senior είναι υποκλάσεις της Student και οι Yard, Stairs και Corridor είναι
υποκλάσεις της Area. Αυτό γίνεται για να είναι δυνατή η εκμετάλλευση των κοινών χαρακτηριστικών των υποκλάσεων. Όλες οι κλάσεις που είναι υπερκλάσεις
άλλων είναι abstract, εφόσον δεν υπάρχει σκοπός δημιουργίας μη εξειδικευμένων αντικειμένων τους. Αυτό επιτυγχάνεται δηλώνοντας μια συνάρτηση μέλος
ως pure virtual. Όπου δεν υπήρχε λόγος ύπαρξης virtual συναρτήσεων για άλλον λόγο, δηλώθηκε ως pure virtual ο destructor.

Η  δεν ορίστηκε ως υποκλάση της Area γιατί έχει αρκετά διαφορετική δομή και λειτουργία, εφόσον αποθηκεύει πολλούς μαθητές, τους οποίους
τροποποιεί (αλλάζει την ένδειξη για το αν είναι εντός τάξης) και οι οποίοι ποτέ δεν εξέρχονται.

Η attend της Student έχει δηλωθεί ως virtual, εφόσον η υλοποίησή της διαφέρει στην Junior και την Senior, και αναμένεται να χρησιμοποιηθεί μέσω δεικτών
σε Student που θα δείχνουν σε αντικείμενα Junior ή Senior. Αυτό δεν έχει γίνει σε άλλες συναρτήσεις (π.χ. enter της Area) γιατί δεν αναμένεται κληθούν
μέσω δείκτη σε υπερκλάση.

Μεταβλητές αναγκαίες σε υποκλάσεις (και όχι εξωτερικά) είναι δηλωμένες σαν protected, όχι σαν private με protected accessors/mutators.

Οι πιο απλές συναρτήσεις είναι ορισμένες στο school.h μέσα στον ορισμό των κλάσεων, για να είναι inline, και οι πιο πολύπλοκες στο school.cpp.
Η χρήση του μοντέλου γίνεται στην main.cpp.

Copy constructors δεν υπάρχουν γιατί δεν γίνεται κάπου στο πρόγραμμα ανάθεση αντικειμένου, άρα δεν χρειάζεται το μοντέλο να προσφέρει αυτήν την
δυνατότητα.

Δεν έχει γίνει χρήση δομών της Standard Library εκτός της string, εφόσον σε αυτήν την περίπτωση αρκούν απλοί πίνακες. Παντού γνωρίζουμε το πλήθος των
αντικειμένων που θα αποθηκευτούν και δεν χρειάζεται κάποια επιπλέον λειτουργία (π.χ. αναζήτηση) που θα απαιτούσε κάποια πιο πολύπλοκη δομή.

Οι μαθητές κάθε τάξης αποθηκεύονται σε μορφή πίνακα δεικτών σε αντικείμενα μαθητών. Στους "χώρους" υπάρχει το πολύ ένας μαθητής την φορά, και
αποθηκεύεται δείκτης σε αυτόν (συγκεκριμένα const Student* εφόσον ο χώρος δεν τροποποιεί ποτέ τους μαθητές που περνάνε από αυτόν).

Όλες οι κλάσεις είναι ορατές στον χρήστη του μοντέλου, παρόλο που ενδείκνυται η χρήση τους μόνο έμμεσα μέσω της School, εφόσον έγινε η διευκρίνηση
πως δεν υπάρχει λόγος να τις κρύψουμε. Τα αντικείμενα αυτών των κλάσεων που δημιουργεί το School είναι μη προσβάσιμα. Επίσης όλες οι υπερκλάσεις,
αν και είναι ορατές, είναι abstract, άρα δεν μπορούν να δημιουργηθούν αντικείμενα αυτών.

Οι συναρτήσεις εκτύπωσης των ορόφων και των τάξεων παίρνουν τον αριθμό τους (cnum/floor_number) σαν όρισμα, εφόσον η συναρτήσεις που τις
καλούν (η συνάρτηση εκτύπωσης του σχολείου και αυτή του ορόφου αντίστοιχα) γνωρίζουν τον κατάλληλο αριθμό όταν το κάνουν, και δεν υπάρχει κάποιος
λόγος αυτή η πληροφορία να αποθηκεύεται σε κάθε αντικείμενο τάξης ή ορόφου.

Το πρόγραμμα δεν δέχεται είσοδο από τον χρήστη. Οι αναγκαίες πληροφορίες δίνονται στην γραμμή εντολής.

Υπάρχει ένα αρχείο names.h με ονόματα από όπου διαλέγει τυχαία η main όταν δημιουργεί μαθητές και δασκάλους.

Το πλήθος των μαθητών καθορίζεται από την χωρητικότητα των τάξεων (*18), έτσι ώστε να γεμίζουν οι τάξεις ακριβώς.

Όταν η enter δέχεται έναν μαθητή τον μετακινεί κατάλληλα μέχρι να φτάσει στην τάξη του. Δεν υπάρχει η περίπτωση να "κολλήσει" κάπου.