/* File: rpggame.h */

#include <vector>
#include "rpgbase.h"

// Είδη ηρώων (για ορίσματα στον constructor του Party)
enum HeroType { warrior, sorcerer, paladin };

// Κλάση που αναπαριστά μια ομάδα ηρώων
class Party {
    Hero** heroes;  // ήρωες
    int heroNum;    // πλήθος ηρώων
    std::vector<Weapon*> ownedWeapons;  // όπλα που έχουν διαθέσιμα
    std::vector<Armor*> ownedArmors;    // πανοπλίες που έχουν διαθέσιμες
    std::vector<Potion*> ownedPotions;  // φίλτρα που έχουν διαθέσιμα
    std::vector<Spell*> ownedSpells;    // ξόρκια που έχουν διαθέσιμα
    public:
        // Constructor
        Party(HeroType* heroTypes, int heroNumInit);

        // Destructor
        ~Party();

        // Ανοίγει μενού όπου ο χρήστης μπορεί να επιλέξει όπλο ή πανοπλία που έχει διαθέσιμη η ομάδα και να το κάνει equip ο hero.
        // Αυτό αφαιρείται από το σύνολο των διαθέσιμων αντικειμένων και προστίθεται σε αυτό ό,τι "πάνω του" πριν ο hero/
        // Αν hero == NULL τότε ο χρήστης διαλέγει έναν ήρωα από την ομάδα.
        // Επιστρέφει true αν έγινε επιτυχώς η αλλαγή, αλλιώς false.
        bool equip(Hero* hero = NULL);

        // Ανοίγει μενού όπου ο χρήστης μπορεί να επιλέξει ένα φίλτρο που έχει διαθέσιμη η ομάδα και να το κάνει use ο hero.
        // Αυτό αφαιρείται από το σύνολο των διαθέσιμων φίλτρων. Αν hero == NULL τότε ο χρήστης διαλέγει έναν ήρωα από την ομάδα.
        // Επιστρέφει true αν έγινε επιτυχώς η χρήση, αλλιώς false.
        bool use(Hero* hero = NULL);

        // Αρχίζει μια μάχη σε γύρους μεταξύ της ομάδας και κάποιων τεράτων. Η διεξάγεται μέσω μενού όπου ο χρήστης μπορεί να
        // επιλέξει τις κινήσεις των ηρώων της ομάδας. Μπορεί να κάνει κανονική επίθεση (attack), να κάνει επίθεση με κάποιο
        // ξόρκι (castSpell) να χρησιμοποιήσει κάποιο φίλτρο (use) ή να αλλάξει όπλο ή πανοπλία (equip). Τα τέρατα επιτίθενται στον πρώτο
        // σε σειρά "ζωντανό" ήρωα. Στο τέλος κάθε γύρου καλούνται οι συναρτήσεις endTurn για τους ήρωες και τα τέρατα.
        // Η μάχη τελειώνει όταν φτάσει η ζωτική ενέργεια όλων των τεράτων ή όλων των ηρώων στο μηδέν. Αν η μάχη τελειώσει επειδή νίκησαν οι
        // ήρωες, τότε αυτοί λαμβάνουν κάποια χρήματα και εμπειρία βάσει του επιπέδου τους και του πλήθους των τεράτων που αντιμετώπισαν.
        // Αλλιώς, οι ήρωες χάνουν τα μισά χρήματα τους. Αν στο τέλος κάποιος ήρωας έχει απομείνει με μηδέν HP, τότε αυτή επαναφέρεται στο μισό της maxHP.
        void battle();

        // Αν οι ήρωες έχουν συνολικά amount χρήματα, αφαιρούνται από αυτούς, και επιστρέφεται true, αλλιώς false.
        bool pay(int amount);

        // Η ομάδα πληρώνει (pay) την τιμή του όπλου, και αν το κάνει επιτυχώς το όπλο προστίθεται στο σύνολο των διαθέσιμων όπλων.
        void buy(Weapon* weapon);

        // Η ομάδα πληρώνει (pay) την τιμή της πανοπλίας, και αν το κάνει επιτυχώς το όπλο προστίθεται στο σύνολο των διαθέσιμων πανοπλιών.
        void buy(Armor* armor);

        // Η ομάδα πληρώνει (pay) την τιμή του φίλτρου, και αν το κάνει επιτυχώς το όπλο προστίθεται στο σύνολο των διαθέσιμων φίλτρων.
        void buy(Potion* potion);

        // Η ομάδα πληρώνει (pay) την τιμή του ξορκιού, και αν το κάνει επιτυχώς το όπλο προστίθεται στο σύνολο των διαθέσιμων ξορκιών.
        void buy(Spell* spell);

        // Ανοίγει μενού όπου ο χρήστης μπορεί να επιλέξει κάτι που έχει διαθέσιμο η ομάδα πουλήσει.
        // Η ομάδα λαμβάνει την μισή τιμή του αντικειμένου (ή ξορκιού) σε χρήματα, και αυτό αφαιρείται από τα διαθέσιμα.
        void sell();

        // Εκτυπώνει το σύνολο των αντικειμένων (συμπεριλαμβανομένων των ξορκιών) που έχει διαθέσιμα η ομάδα
        void checkInventory() const;

        // Εκτυπώνει τους ήρωες της ομάδας
        void displayHeroStats() const;
};

// Κλάση που αναπαριστά μια αγορά
class Market {
    Item** stock;       // αντικείμενα (και ξόρκια) που είναι προς πώληση
    int weaponAmount;   // πλήθος όπλων
    int armorAmount;    // πλήθος πανοπλιών
    int potionAmount;   // πλήθος φίλτρων
    int spellAmount;    // πλήθος ξορκιών
    public:
        // Constructor. Τα αντικείμενα φτιάχνονται κατά αύξουσα "δύναμη". Όσο περισσότερα τόσο πιο "δυνατό" το τελευταίο.
        // Τα φίλτρα χωρίζονται δια τρία σε δύναμης, επιδεξιότητας και ετκινησίας, και τα ξόρκια σε πάγου, φωτιάς και ηλεκτρισμού.
        Market(int weaponNumInit, int armorNumInit, int potionNumInit, int spellNumInit);

        // Destructor
        ~Market();

        // Ανοίγει μενού όπου ο χρήστης μπορεί να επιλέξει κάτι που έχει διαθέσιμο η αγορά για να το αγοράσει (buy) το party
        void buy(Party& party);

        // Καλεί την sell του party (είναι εδώ γιατί ταιριάζει νοηματικά και σε μια διαφορερική υλοποίηση μπορεί να έκανε χρήση των δεδομένων της αγοράς)
        void sell(Party& party) { party.sell(); }
};

// Τύποι τετραγώνων στο πλέγμα
enum Square { nonAccesible, market, common };

// Κατευθύνσεις κίνησης στο πλέγμα
enum Direction { upDir, downDir, leftDir, rightDir };

// Κλάση που αναπαριστά ένα πλέγμα/κόσμο παιχνιδιού
class Grid {
    Square** grid;      // το πλέγμα των τετραγώνων
    int width;          // το πλάτος του πλέγματος
    int height;         // το ύψος του πλέγματος
    Party party;        // η ομάδα των ηρώων που κινείται στο πλέγμα
    int position[2];    // η θέση της ομάδας στο πλέγμα
    Market gameMarket;  // η αγορά του πλέγματος/παιχνιδιού
    public:
        // Constructor. Ορίζει τυχαία το είδος των τετργώνων εκτός από το αρχικό, που είναι common.
        // Φτιάχνει μια ομάδα όπως ορίζουν τα ορίσματα και μια αγορά με 15 αντικείμενα κάθε είδους,
        Grid(int initWidth, int initHeight, HeroType* heroTypes, int heroNumInit);

        // Destructor
        ~Grid();

        // Αρχίζει το παιχνίδι, δίνοντας στον χρήστη την δυνατότητα μέσω εντολών να κινηθεί στο πλέγμα (move).
        // Μπορεί επίσης να δει τις πληροφορίες των ηρώων της ομάδας (displayHeroStats), να δει τα αντικείμενα και ξόρκια που διαθέτει
        // (checkInventory), να χρησιμοποιήσει όπλα (equip), πανοπλίες (equip) και φίλτρα (use) πάνω στους ήρωες της ομάδας.
        // Οταν βρίσκεται σε τετράγωνο αγοράς, μπορεί και να αγοράσει (buy) και να πουλήσει (sell) αντικείμενα και ξόρκια.
        // Μπορεί επίσης να σταματήσει το παιχνίδι (quitGame).
        void playGame();

        // Κινεί την ομάδα προς την κατεύθυνση direction.
        // Αν πάει σε common τετράγωνο υπάρχει μια πιθανότητα να ξεκινήσει μάχη της ομάδας (battle) με τέρατα.
        void move(Direction direction);

        // Εκτυπώνει το πλέγμα, δηλαδή το είδος κάθε κουτιού και το πού βρίκεται η ομάδα.
        void displayMap() const;
};